//Q. Describe and give an example of each of the following types of polymorphism:

//     Ad-hoc polymorphism
//     Parametric polymorphism
//     Subtype polymorphism

/*Solution*/

// Subtype Polymorphism(Runtime Polymorphism)

//     Subtype polymorphism is what everyone understands when they say "polymorphism" in C++.It's the ability to use derived classes through base class pointers and references.

//     Here is an example. Suppose you have various cats like these felines,
// Polymorphic Cats Polymorphic cats on a mat by James Halliday.

// Since they are all of Felidae biological family, and they all should be able to meow, they can be represented as classes inheriting from Felid base class and overriding the meow pure virtual function,

// // file cats.h

// class Felid {
// public:
//  virtual void meow() = 0;
// };

// class Cat : public Felid {
// public:
//  void meow() { std::cout << "Meowing like a regular cat! meow!\n"; }
// };

// class Tiger : public Felid {
// public:
//  void meow() { std::cout << "Meowing like a tiger! MREOWWW!\n"; }
// };

// class Ocelot : public Felid {
// public:
//  void meow() { std::cout << "Meowing like an ocelot! mews!\n"; }
// };

// Now the main program can use Cat, Tiger and Ocelot interchangeably through Felid (base class) pointer,

// #include <iostream>
// #include "cats.h"

// void do_meowing(Felid *cat) {
//  cat->meow();
// }

// int main() {
//  Cat cat;
//  Tiger tiger;
//  Ocelot ocelot;

//  do_meowing(&cat);
//  do_meowing(&tiger);
//  do_meowing(&ocelot);
// }

// Here the main program passes pointers to cat, tiger and ocelot to do_meowing function that expects a pointer to Felid. Since they are all Felids, the program calls the right meow function for each felid and the output is:

// Meowing like a regular cat! meow!
// Meowing like a tiger! MREOWWW!
// Meowing like an ocelot! mews!

// Subtype polymorphism is also called runtime polymorphism for a good reason. The resolution of polymorphic function calls happens at runtime through an indirection via the virtual table. Another way of explaining this is that compiler does not locate the address of the function to be called at compile-time, instead when the program is run, the function is called by dereferencing the right pointer in the virtual table.

// In type theory it's also known as inclusion polymorphism.
// Parametric Polymorphism (Compile-Time Polymorphism)

// Parametric polymorphism provides a means to execute the same code for any type. In C++ parametric polymorphism is implemented via templates.

// One of the simplest examples is a generic max function that finds maximum of two of its arguments,

// #include <iostream>
// #include <string>

// template <class T>
// T max(T a, T b) {
//  return a > b ? a : b;
// }

// int main() {
//  std::cout << ::max(9, 5) << std::endl;     // 9

//  std::string foo("foo"), bar("bar");
//  std::cout << ::max(foo, bar) << std::endl; // "foo"
// }

// Here the max function is polymorphic on type T. Note, however, that it doesn't work on pointer types because comparing pointers compares the memory locations and not the contents. To get it working for pointers you'd have to specialize the template for pointer types and that would no longer be parametric polymorphism but would be ad-hoc polymorphism.

// Since parametric polymorphism happens at compile time, it's also called compile-time polymorphism.
// Ad-hoc Polymorphism (Overloading)

// Ad-hoc polymorphism allows functions with the same name act differently for each type. For example, given two ints and the + operator, it adds them together. Given two std::strings it concatenates them together. This is called overloading.

// Here is a concrete example that implements function add for ints and strings,

// #include <iostream>
// #include <string>

// int add(int a, int b) {
//  return a + b;
// }

// std::string add(const char *a, const char *b) {
//  std::string result(a);
//  result += b;
//  return result;
// }

// int main() {
//  std::cout << add(5, 9) << std::endl;
//  std::cout << add("hello ", "world") << std::endl;
// }

// Ad-hoc polymorphism also appears in C++ if you specialize templates. Returning to the previous example about max function, here is how you'd write a max for two char *,

// template <>
// const char *max(const char *a, const char *b) {
//  return strcmp(a, b) > 0 ? a : b;
// }

// Now you can call ::max("foo", "bar") to find maximum of strings "foo" and "bar".